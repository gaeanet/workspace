Spring Framework 5 プログラミング入門

掲載リスト


リスト2-1
package jp.tuyano.spring.sample1;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
        System.out.println( "Hello World!" );
    }
}


リスト2-2
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>jp.tuyano.spring.sample1</groupId>
  <artifactId>MySampleApp1</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>MySampleApp1</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>


リスト2-3
<project xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
		http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>jp.tuyano.spring.sample1</groupId>
	<artifactId>MySampleApp1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
  
	<properties>

		<!-- Generic properties -->
		<java.version>1.6</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Spring -->
		<spring-framework.version>3.2.3.RELEASE</spring-framework.version>

		<!-- Hibernate / JPA -->
		<hibernate.version>4.2.1.Final</hibernate.version>

		<!-- Logging -->
		<logback.version>1.0.13</logback.version>
		<slf4j.version>1.7.5</slf4j.version>

		<!-- Test -->
		<junit.version>4.11</junit.version>

	</properties>
	
	<dependencies>
		<!-- Spring and Transactions -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>

		<!-- Logging with SLF4J & LogBack -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Hibernate -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.version}</version>
		</dependency>

		
		<!-- Test Artifacts -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring-framework.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>	
</project>


リスト2-4
package jp.tuyano.spring.sample1;

public class App {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}


リスト2-5
public static void main(String[] args) {
	System.out.println("Hello STS World!");
}


リスト2-6
package jp.tuyano.spring.sample1;

public class App {
	
	public static void main(String[] args) {
		System.out.println("Welcome to Spring world with Gradle!");
	}

}


リスト2-7
apply plugin: 'java'

repositories {
	jcenter()
	maven {
		url 'https://repo.spring.io/libs-milestone'
	}
}

dependencies {
	compile 'org.springframework:spring-context:5.0.0.RELEASE'
	compile 'org.slf4j:slf4j-api:1.7.25'
	testCompile 'junit:junit:4.12'
}

task run(type: JavaExec) {
	main = 'jp.tuyano.spring.sample1.App'
	classpath = sourceSets.main.runtimeClasspath
}


リスト3-1
package jp.tuyano.spring.sample1;

import java.util.Calendar;
import java.util.Date;

public class MyBean {
	private Date date;
	private String message;
	
	public MyBean() {
		super();
		this.date = Calendar.getInstance().getTime();
	}
	public MyBean(String message) {
		this();
		this.message = message;
	}

	public Date getDate() {
		return date;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	@Override
	public String toString() {
		return "MyBean [message=" + message + ", date=" + date + "]";
	}
	
}


リスト3-2
package jp.tuyano.spring.sample1;

public class App {

	public static void main(String[] args) {
		MyBean bean = new MyBean("This is Bean sample!");
		System.out.println(bean);
	}

}


リスト3-3
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

</beans>


リスト3-4
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="mybean1" class="jp.tuyano.spring.sample1.MyBean">
		<property name="message" value="this is sample bean!"></property>
	</bean>

</beans>


リスト3-5
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="mybean1" class="jp.tuyano.spring.sample1.MyBean">
		<constructor-arg type="String" name="message" value="this is sample bean!">
		</constructor-arg>
	</bean>
</beans>


リスト3-6
package jp.tuyano.spring.sample1;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {

	private static ApplicationContext app;

	public static void main(String[] args) {
		app = new ClassPathXmlApplicationContext("bean.xml");
		MyBean bean = (MyBean)app.getBean("mybean1");
		System.out.println(bean);
	}

}


リスト3-7
<project xmlns="http://maven.apache.org/POM/4.0.0"
 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
		http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>org.springframework.samples</groupId>
	<artifactId>MySampleApp1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
  
	<properties>

		<!-- Generic properties -->
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Spring -->
		<spring-framework.version>5.0.0.RELEASE</spring-framework.version>

		<!-- Logging -->
		<logback.version>1.2.3</logback.version>
		<slf4j.version>1.7.25</slf4j.version>

		<!-- Test -->
		<junit.version>4.12</junit.version>

	</properties>
	
	<dependencies>
		<!-- Spring and Transactions -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>

		<!-- Logging with SLF4J & LogBack -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
		</dependency>
		
		<!-- Test Artifacts -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring-framework.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>	
	
	<build>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.3</version>
				<configuration>
					<mainClass>jp.tuyano.spring.sample1.App</mainClass>
				</configuration>
			</plugin>
		</plugins>
	</build>
	
	<!-- Milestone repository -->
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/libs-milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>
	
</project>


リスト3-8
package jp.tuyano.spring.sample1;

import java.util.Date;

public interface MyBeanInterface {

	public abstract Date getDate();

	public abstract String getMessage();

	public abstract void setMessage(String message);

}


リスト3-9
package jp.tuyano.spring.sample1;

import java.util.Calendar;
import java.util.Date;

public class MyBean implements MyBeanInterface {
	private Date date;
	private String message;
	
	public MyBean() {
		super();
		this.date = Calendar.getInstance().getTime();
	}
	public MyBean(String message) {
		this();
		this.message = message;
	}

	public Date getDate() {
		return date;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	@Override
	public String toString() {
		return "MyBean [message=" + message + ", date=" + date + "]";
	}
	
}


リスト3-10
package jp.tuyano.spring.sample1;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {

	private static ApplicationContext app;

	public static void main(String[] args) {
		app = new ClassPathXmlApplicationContext("bean.xml");
		MyBeanInterface bean = (MyBeanInterface)app.getBean("mybean1");
		System.out.println(bean);
	}

}


リスト3-11
package jp.tuyano.spring.sample1;

import java.util.Date;

public class MyBean2 implements MyBeanInterface {

	public Date getDate() {
		// TODO Auto-generated method stub
		return null;
	}

	public String getMessage() {
		// TODO Auto-generated method stub
		return null;
	}

	public void setMessage(String message) {
		// TODO Auto-generated method stub
	}

}


リスト3-12
package jp.tuyano.spring.sample1;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class MyBean2 implements MyBeanInterface {
	private String message = "hello!";
	private Date date = Calendar.getInstance().getTime();

	public Date getDate() {
		return date;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	@Override
	public String toString() {
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		return "'" + message + "' (" + format.format(date) + ")";
	}
	
}


リスト3-13
<bean id="mybean1" class="jp.tuyano.spring.sample1.MyBean2">
	<property name="message" value="It's new Bean!"></property>
</bean>


リスト3-14
package jp.tuyano.spring.sample1;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class App {

	private static ApplicationContext app;
		
	public static void main(String[] args) {
		app = new AnnotationConfigApplicationContext(MyBean2.class);
		MyBeanInterface bean = app.getBean(MyBeanInterface.class);
		System.out.println(bean);
	}

}


リスト3-15
package jp.tuyano.spring.sample1;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AutoMyBeanConfig {

	@Bean
	public MyBeanInterface myBean(){
		return new MyBean("This is bean from Auto Config!");
	}
}


リスト3-16
public static void main(String[] args) {
	app = new AnnotationConfigApplicationContext(AutoMyBeanConfig.class);
	MyBeanInterface bean = app.getBean(MyBeanInterface.class);
	System.out.println(bean);
}


リスト4-1
<project xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
	http://maven.apache.org/xsd/maven-4.0.0.xsd">
	
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.springframework.samples.service.service</groupId>
	<artifactId>MySampleWebApp1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
  
	<properties>

		<!-- Generic properties -->
		<java.version>1.6</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		
		<!-- Web -->
		<jsp.version>2.2</jsp.version>
		<jstl.version>1.2</jstl.version>
		<servlet.version>2.5</servlet.version>
		
		<!-- Spring -->
		<spring-framework.version>3.2.3.RELEASE</spring-framework.version>

		<!-- Hibernate / JPA -->
		<hibernate.version>4.2.1.Final</hibernate.version>

		<!-- Logging -->
		<logback.version>1.0.13</logback.version>
		<slf4j.version>1.7.5</slf4j.version>

		<!-- Test -->
		<junit.version>4.11</junit.version>

	</properties>
	
	<dependencies>
	
		<!-- Spring MVC -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		
		<!-- Other Web dependencies -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>${jstl.version}</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>${servlet.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>${jsp.version}</version>
			<scope>provided</scope>
		</dependency>
	
		<!-- Spring and Transactions -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>

		<!-- Logging with SLF4J & LogBack -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Hibernate -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.version}</version>
		</dependency>

		
		<!-- Test Artifacts -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring-framework.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>	
</project>

リスト4-2
<project xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  
	<modelVersion>4.0.0</modelVersion>
	<groupId>jp.tuyano.spring.websample1</groupId>
	<artifactId>MySampleWebApp1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
  
    <properties>

		<!-- Generic properties -->
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		
		<!-- Web -->
		<jsp.version>2.2</jsp.version>
		<jstl.version>1.2</jstl.version>
		<servlet.version>3.1.0</servlet.version>

		<!-- Spring -->
		<spring-framework.version>5.0.0.RELEASE</spring-framework.version>

		<!-- Logging -->
		<logback.version>1.2.3</logback.version>
		<slf4j.version>1.7.25</slf4j.version>

		<!-- Test -->
		<junit.version>4.12</junit.version>

	</properties>
	
	<dependencies>
	
		<!-- Spring MVC -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		
		<!-- Other Web dependencies -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>${jstl.version}</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${servlet.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>${jsp.version}</version>
			<scope>provided</scope>
		</dependency>
	
		<!-- Logging with SLF4J & LogBack -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
		</dependency>
		
		<!-- Test Artifacts -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring-framework.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>	
	
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/libs-milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>
	
</project>


リスト4-3
<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" 
	id="WebApp_ID" version="2.5">

  <display-name>MySampleWebApp1</display-name>
  
  <context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>classpath:spring/application-config.xml</param-value>
  </context-param>
  
  <listener>
	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
  
	<servlet>
		<servlet-name>dispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/mvc-config.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcherServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
</web-app>


リスト4-4
<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
		http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
		version="3.1">

	<display-name>MySampleWebApp1</display-name>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/application-config.xml</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>

</web-app>


リスト4-5
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd">
    
	<!-- Uncomment and add your base-package here:
	<context:component-scan
		base-package="org.springframework.samples.service"/>  -->

</beans>


リスト4-6
package jp.tuyano.spring.websample1;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Component;

@Component
public class MyBean {
	private List<String> messages = new ArrayList<String>();
	
	public MyBean() {
		super();
		messages.add("This is Bean sample.");
	}

	public void addMessage(String message) {
		messages.add(message);
	}
	
	public String getMessage(int n) {
		return messages.get(n);
	}

	public void setMessage(int n, String message) {
		messages.set(n,message);
	}

	public List<String> getMessages() {
		return messages;
	}

	public void setMessages(List<String> messages) {
		this.messages = messages;
	}

	@Override
	public String toString() {
		String result = "MyBean [\n";
		for(String message : messages) {
			result += "\t'" + message + "'\n";
		}
		result += "]";
		return result;
	}

}


リスト4-7
<bean id="mybean1" class="jp.tuyano.spring.websample1.MyBean" />


リスト4-8
package jp.tuyano.spring.websample1;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

@WebServlet("/sample")
public class MySampleServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	ApplicationContext app;
	
	@Override
	public void init() throws ServletException {
		super.init();
		app = new ClassPathXmlApplicationContext("/spring/application-config.xml");
	}

	protected void doGet(HttpServletRequest request, 
			HttpServletResponse response) 
			throws ServletException, IOException {
		MyBean mybean1 = (MyBean)app.getBean("mybean1");
		request.setAttribute("mybean", mybean1);
		request.getRequestDispatcher("/index.jsp").forward(request, response);
	}

	protected void doPost(HttpServletRequest request, 
			HttpServletResponse response) 
			throws ServletException, IOException {
		String message = request.getParameter("message");
		MyBean mybean1 = (MyBean)app.getBean("mybean1");
		mybean1.addMessage(message);
		response.sendRedirect("sample");
	}

}


リスト4-9
<servlet>
	<description></description>
	<display-name>MySampleServlet</display-name>
	<servlet-name>MySampleServlet</servlet-name>
	<servlet-class>jp.tuyano.spring.websample1.MySampleServlet</servlet-class>
</servlet>
<servlet-mapping>
	<servlet-name>MySampleServlet</servlet-name>
	<url-pattern>/sample</url-pattern>
</servlet-mapping>


リスト4-10
<!DOCTYPE html>

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
    
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%>

<html>
	<head>
		<meta charset="utf-8">
		<title>Welcome</title>
	</head> 
	<body>
		<h1>Sample Page</h1>
		<pre>${mybean}</pre>
		<hr>
		<form action="sample" method="post">
			<input type="text" id="message" name="message">
			<input type="submit" value="add">
		</form>
	</body>
</html>


リスト4-11
<filter>
	<filter-name>EncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
	<init-param>
		<param-name>encoding</param-name>
		<param-value>UTF-8</param-value>
	</init-param>
	<init-param>
		<param-name>forceEncoding</param-name>
		<param-value>true</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>EncodingFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>


リスト4-12
package jp.tuyano.spring.websample1;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.context.support.SpringBeanAutowiringSupport;

@WebServlet("/sample")
public class MySampleServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	@Autowired
	private MyBean mybean1;
	
	@Override
	public void init() throws ServletException {
		super.init();
		SpringBeanAutowiringSupport
			.processInjectionBasedOnCurrentContext(this);
	}

	protected void doGet(HttpServletRequest request, 
			HttpServletResponse response) 
			throws ServletException, IOException {
		request.setAttribute("mybean", mybean1);
		request.getRequestDispatcher("/index.jsp").forward(request, response);
	}

	protected void doPost(HttpServletRequest request, 
			HttpServletResponse response) 
			throws ServletException, IOException {
		String message = request.getParameter("message");
		mybean1.addMessage(message);
		response.sendRedirect("sample");
	}

}


リスト4-13
package jp.tuyano.spring.websample1;

import jp.tuyano.spring.websample1.MyBean;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "jp.tuyano.spring.websample1")
public class MyBeanConfig {

	@Bean
	public MyBean myBean(){
		return new MyBean();
	}
	
}


リスト4-14
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>classpath:spring/application-config.xml</param-value>
</context-param>


リスト4-15
<context-param>
	<param-name>contextClass</param-name>
	<param-value>
	org.springframework.web.context.support.AnnotationConfigWebApplicationContext
	</param-value>
</context-param>
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>jp.tuyano.spring.websample1.MyBeanConfig</param-value>
</context-param>


リスト4-16
package jp.tuyano.spring.websample1;

import java.util.Calendar;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class MyBean2 {
	
	@Autowired
	private MyBean bean;
	private Date date;
	
	public MyBean2(){
		super();
		date = Calendar.getInstance().getTime();
	}
	public MyBean getBean() {
		return bean;
	}

	public void setBean(MyBean bean) {
		this.bean = bean;
	}

	public Date getDate() {
		return date;
	}

	@Override
	public String toString() {
		return "MyBean2 (" + date + ");\n" + bean + "\n--end.";
	}
	
}


リスト4-17
package jp.tuyano.spring.websample1;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "jp.tuyano.spring.websample1")
public class MyBeanConfig2 {
	
	@Autowired
	private MyBeanConfig config;

	@Bean
	public MyBean2 myBean2(){
		return new MyBean2();
	}
}


リスト4-18
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>jp.tuyano.spring.websample1.MyBeanConfig2</param-value>
</context-param>


リスト4-19
package jp.tuyano.spring.websample1;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.context.support.SpringBeanAutowiringSupport;

@WebServlet("/sample")
public class MySampleServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	@Autowired
	private MyBean2 mybean2; //☆
	
	@Override
	public void init() throws ServletException {
		super.init();
		SpringBeanAutowiringSupport
			.processInjectionBasedOnCurrentContext(this);
	}

	protected void doGet(HttpServletRequest request, 
			HttpServletResponse response) 
			throws ServletException, IOException {
		request.setAttribute("mybean", mybean2); //☆
		request.getRequestDispatcher("/index.jsp").forward(request, response);
	}

	protected void doPost(HttpServletRequest request, 
			HttpServletResponse response) 
			throws ServletException, IOException {
		String message = request.getParameter("message");
		mybean2.getBean().addMessage(message); //☆
		response.sendRedirect("sample");
	}

}


リスト4-20
package jp.tuyano.spring.websample1;

import org.springframework.context.ApplicationEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextClosedEvent;
import org.springframework.context.event.ContextRefreshedEvent;

public class MySampleApplicationListener 
		implements ApplicationListener<ApplicationEvent> {

	public void onApplicationEvent(ApplicationEvent event) {
		if (event instanceof ContextRefreshedEvent){
			System.out.println("refreshed!");
		}
		if (event instanceof ContextClosedEvent){
			System.out.println("closed!");
		}
	}
	
}


リスト4-21
@Bean
public MySampleApplicationListener appListener() {
	return new MySampleApplicationListener();
}


リスト4-22
package jp.tuyano.spring.websample1;

import org.springframework.context.ApplicationEvent;

public class MyBeanEvent extends ApplicationEvent {
	private static final long serialVersionUID = 1L;
	
	public MyBeanEvent(Object source) {
		super(source);
		System.out.println("create MyBeanEvent!");
	}

}


リスト4-23
package jp.tuyano.spring.websample1;

import org.springframework.context.ApplicationListener;

public class MyBeanEventListener 
		implements ApplicationListener<MyBeanEvent> {

	public void onApplicationEvent(MyBeanEvent event) {
		System.out.println("MyBeanEvent is occured!!");
	}

}


リスト4-24
package jp.tuyano.spring.websample1;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.ApplicationEventPublisherAware;

public class MyBeanEventService 
		implements ApplicationEventPublisherAware {
	
	@Autowired
	private MyBean mybean;
	private ApplicationEventPublisher publisher;
	
	public void setApplicationEventPublisher(
			ApplicationEventPublisher applicationEventPublisher) {
		this.publisher = applicationEventPublisher;
		System.out.println("setApplicationEventPublisher");
	}
	
	public void doService(String message) {
		System.out.println("doService!");
		mybean.addMessage(message);
		publisher.publishEvent(new MyBeanEvent(this));
	}

}


リスト4-25
@Bean
public MyBeanEventListener mybeanListener() {
	return new MyBeanEventListener();
}

@Bean
public MyBeanEventService mybeanService() {
	return new MyBeanEventService();
}


リスト4-26
package jp.tuyano.spring.websample1;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.context.support.SpringBeanAutowiringSupport;

@WebServlet("/sample")
public class MySampleServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	@Autowired
	private MyBean2 mybean2;
	
	@Autowired
	private MyBeanEventService beanService; //☆
	
	@Override
	public void init() throws ServletException {
		super.init();
		SpringBeanAutowiringSupport
			.processInjectionBasedOnCurrentContext(this);
		
	}

	protected void doGet(HttpServletRequest request, 
			HttpServletResponse response) 
			throws ServletException, IOException {
		request.setAttribute("mybean", mybean2);
		request.getRequestDispatcher("/index.jsp").forward(request, response);
	}

	protected void doPost(HttpServletRequest request, 
			HttpServletResponse response) 
			throws ServletException, IOException {
		String message = request.getParameter("message");
		beanService.doService(message); //☆
		response.sendRedirect("sample");
	}

}


リスト5-1
<project 
	xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
		http://maven.apache.org/xsd/maven-4.0.0.xsd">
	
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.springframework.samples</groupId>
	<artifactId>AOPApp1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
  
	<properties>

		<!-- Generic properties -->
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Spring -->
		<spring-framework.version>5.0.0.RELEASE</spring-framework.version>

		<!-- aspectj -->
		<aspectjrt-version>1.8.10</aspectjrt-version>

		<logback.version>1.2.3</logback.version>
		<slf4j.version>1.7.25</slf4j.version>

		<!-- Test -->
		<junit.version>4.12</junit.version>

	</properties>
	
	<dependencies>
	
		<!-- Spring and Transactions -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>

		<!-- AspectJ -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${aspectjrt-version}</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${aspectjrt-version}</version>
		</dependency>

		<!-- Logging with SLF4J & LogBack -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
		</dependency>
		
		<!-- Test Artifacts -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring-framework.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>	

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/libs-milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

</project>


リスト5-2
package jp.tuyano.spring.aop1;

public interface IMyBean<T> {
	public void setDataObject(T obj);
	public T getDataObject();
	public void addData(Object obj);
	public String toString();
}


リスト5-3
package jp.tuyano.spring.aop1;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

public class MyBean1 implements IMyBean<List<String>> {
	private List<String> data = new ArrayList<String>();
	private Date date = Calendar.getInstance().getTime();

	@Override
	public void setDataObject(List<String> obj) {
		data = obj;
	}
	
	@Override
	public List<String> getDataObject() {
		return data;
	}
	
	@Override
	public void addData(Object obj) {
		data.add(obj.toString());
	}

	@Override
	public String toString() {
		String result = "MyBean1 [data=";
		for(String s : data){
			result += s + ", ";
		}
		SimpleDateFormat fm = new SimpleDateFormat("yyyy-MM-dd");
		result += "date=" + fm.format(date) + "]";
		return result;
	}

}


リスト5-4
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd">

	<bean id="bean1" class="jp.tuyano.spring.aop1.MyBean1"></bean>

</beans>


リスト5-5
package jp.tuyano.spring.aop1;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {
	private static ApplicationContext app;

	@SuppressWarnings("unchecked")
	public static void main(String[] args) {
		app = new ClassPathXmlApplicationContext("bean.xml");
		IMyBean<String> bean = (IMyBean<String>) app.getBean("bean1");
		bean.addData("Hello AOP World!");
		bean.addData("this is sample data.");
		System.out.println(bean);
	}

}


リスト5-6
package jp.tuyano.spring.aop1;

import org.aspectj.lang.JoinPoint;

public class MyBeanAspect {

	public void addDataBefore(JoinPoint joinPoint) {
		System.out.println("*addData before...*");
		String args = "args: \"";
		for(Object ob : joinPoint.getArgs()){
			args += ob + "\" ";
		}
		System.out.println(args);
	}
}


リスト5-7
<?xml version="1.0" encoding="UTF-8"?>
<beans ……略……>

	<aop:config>
		<aop:aspect id="mybeanaspect1" ref="aop1">
			<aop:pointcut expression="execution(* jp.tuyano.spring.aop1.IMyBean.addData(..))" id="p1"/>
			<aop:before method="addDataBefore" pointcut-ref="p1"/>
		</aop:aspect>
	</aop:config>
	
	<bean id="bean1" class="jp.tuyano.spring.aop1.MyBean1"></bean>
	<bean id="aop1"  class="jp.tuyano.spring.aop1.MyBeanAspect"></bean>

</beans>


リスト5-8
package jp.tuyano.spring.aop1;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class MyBeanAspect {

	@Before("execution(* jp.tuyano.spring.aop1.IMyBean.addData(..))")
	public void addDataBefore(JoinPoint joinPoint) {
		System.out.println("*addData before...*");
		String args = "args: \"";
		for(Object ob : joinPoint.getArgs()){
			args += ob + "\" ";
		}
		System.out.println(args);
	}
}


リスト5-9
<?xml version="1.0" encoding="UTF-8"?>
<beans ……略……>

	<aop:aspectj-autoproxy/>
	<bean id="bean1" class="jp.tuyano.spring.aop1.MyBean1"></bean>
	<bean id="aop1"  class="jp.tuyano.spring.aop1.MyBeanAspect"></bean>

</beans>


リスト5-10
package jp.tuyano.spring.aop1;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAspectJAutoProxy;

@Configuration
@EnableAspectJAutoProxy
public class MyBeanConfig {

	@Bean
	public MyBean1 bean1() {
		return new MyBean1();
	}
	
	@Bean
	public MyBeanAspect aop1() {
		return new MyBeanAspect();
	}
}


リスト5-11
<?xml version="1.0" encoding="UTF-8"?>
<beans ……略……>

</beans>


リスト5-12
package jp.tuyano.spring.aop1;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class App {
	private static ApplicationContext app;

	@SuppressWarnings("unchecked")
	public static void main(String[] args) {
		app = new AnnotationConfigApplicationContext(MyBeanConfig.class);
		IMyBean<String> bean = (IMyBean<String>) app.getBean("bean1");
		bean.addData("Hello AOP World!");
		bean.addData("this is sample with Config Class.");
		System.out.println(bean);
	}

}


リスト5-13
package jp.tuyano.spring.aop1;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

public class MyBean2  implements IMyBean<List<Integer>> {
	private List<Integer> data = new ArrayList<Integer>();
	private Date date = Calendar.getInstance().getTime();

	@Override
	public void setDataObject(List<Integer> obj) {
		data = obj;
	}
	
	@Override
	public List<Integer> getDataObject() {
		return data;
	}
	
	@Override
	public void addData(Object obj) {
		data.add(Integer.parseInt(obj.toString()));
	}

	@Override
	public String toString() {
		String result = "MyBean1 [data=";
		for(Integer n : data){
			result += n + ", ";
		}
		SimpleDateFormat fm = new SimpleDateFormat("yyyy-MM-dd");
		result += "date=" + fm.format(date) + "]";
		return result;
	}

}


リスト5-14
@Bean
public MyBean2 bean2() {
	return new MyBean2();
}


リスト5-15
@SuppressWarnings("rawtypes")
public static void main(String[] args) {
	app = new AnnotationConfigApplicationContext(MyBeanConfig.class);
	IMyBean bean1 = (IMyBean) app.getBean("bean1");
	bean1.addData("Hello AOP World!");
	System.out.println(bean1);
	IMyBean bean2 = (IMyBean) app.getBean("bean2");
	bean2.addData("Hello AOP World!");
	System.out.println(bean2);
}


リスト5-16
package jp.tuyano.spring.aop1;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;

@Aspect
public class MyBeanAspect {

	@AfterReturning(value="execution(* jp.tuyano.spring.aop1.IMyBean.toString())", returning="str")
	public void toStringAfterReturning(String str) {
		System.out.println("*toString returning...*");
		System.out.println("return:" + str);
		System.out.println("*...end toString returning*");
	}
	
	@AfterThrowing(value="execution(* jp.tuyano.spring.aop1.MyBean2.addData(..))", throwing="e")
	public void addDataAfterThrowing(Exception e) {
		System.out.println("*Except in addData...*");
		System.out.println(e.getLocalizedMessage());
		System.out.println("*...end Except in addData*");
	}
	
	@Around("execution(* jp.tuyano.spring.aop1.MyBean1.addData(..))")
	public void toStringAround(ProceedingJoinPoint joinPoint) {
		System.out.println("*around addData...*");
		System.out.println("before:" + joinPoint.getTarget());
		try {
			joinPoint.proceed();
		} catch (Throwable e) {
			e.printStackTrace();
		}
		System.out.println("after:" + joinPoint.getTarget());
		System.out.println("*...end around addData.*");
	}
}


リスト6-1
this is sample text file.
Hello　Spring!


リスト6-2
package jp.tuyano.spring.sample2;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.StaticApplicationContext;
import org.springframework.core.io.Resource;

public class App {

	private static ApplicationContext app;

	public static void main(String[] args) {
		app = new StaticApplicationContext();
		Resource res = app.getResource("classpath:sample.txt");
		if (res.exists()) {
			try {
				System.out.println("URI:" + res.getURI());
			} catch (IOException e) {
				e.printStackTrace();
			}
			System.out.println("*" + res.getFilename() + "* ==========");
			InputStream input = null;
			try {
				input = res.getInputStream();
				BufferedInputStream buf_input = new BufferedInputStream(input);
				byte[] bytes = new byte[10240];
				buf_input.read(bytes);
				String xml_str = new String(bytes).trim();
				System.out.println(xml_str);
			} catch (IOException e) {
				e.printStackTrace();
			}
			System.out.println("* end * ==========");
		} else {
			System.out.println("not found:" + res);
		}
	}

}


リスト6-3
package jp.tuyano.spring.sample2;

import java.util.Calendar;
import java.util.Date;

public class MyBean {
	private String message;
	private Date date = Calendar.getInstance().getTime();

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public Date getDate() {
		return date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	@Override
	public String toString() {
		return "MyBean [message=" + message + ", date=" + date + "]";
	}
	
}


リスト6-4
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd">
	
	<bean id="bean1" class="jp.tuyano.spring.sample2.MyBean">
		<property name="message" value="this is sample bean!" />
	</bean>

</beans>


リスト6-5
package jp.tuyano.spring.sample2;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;

public class App {

	private static ApplicationContext app;

	public static void main(String[] args) {
		app = new FileSystemXmlApplicationContext("file:/c:/bean.xml"); // ☆
		MyBean bean = (MyBean) app.getBean("bean1");
		System.out.println(bean);
	}

}


リスト6-6
bean.message=Hello! this is sample message.


リスト6-7
<?xml version="1.0" encoding="UTF-8"?>
<beans ……略……>
	
	<context:property-placeholder location="classpath:bean.properties"/>
	
	<bean id="bean1" class="jp.tuyano.spring.sample2.MyBean">
		<property name="message" value="${bean.message}" />
	</bean>
	
</beans>


リスト6-8
keeper.to=taro@yamda
keeper.from=hanako@flower


リスト6-9
package jp.tuyano.spring.sample2;

public class MyBeanKeeper {
	private MyBean bean;
	private String from;
	private String to;
	
	public MyBeanKeeper(MyBean mybean, String from, String to) {
		super();
		this.bean = mybean;
		this.from = from;
		this.to = to;
	}
	
	public MyBean getBean() {
		return bean;
	}
	public void setBean(MyBean bean) {
		this.bean = bean;
	}
	public String getFrom() {
		return from;
	}
	public void setFrom(String from) {
		this.from = from;
	}
	public String getTo() {
		return to;
	}
	public void setTo(String to) {
		this.to = to;
	}

	@Override
	public String toString() {
		return "MyBeanKeeper [bean=" + bean + ", from=" + from + ", to=" + to + "]";
	}
	
}


リスト6-10
<?xml version="1.0" encoding="UTF-8"?>
<beans ……略……>
	
	<context:property-placeholder location="classpath:bean.properties"/>
	
	<bean id="bean1" class="jp.tuyano.spring.sample2.MyBean">
		<property name="message" value="${bean.message}" />
	</bean>
	
	<bean id="mybeanprops"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="location">
			<value>classpath:bean.properties</value>
		</property>
	</bean>

</beans>


リスト6-11
package jp.tuyano.spring.sample2;

import java.util.Properties;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {

	private static ApplicationContext app;
	private static Properties mybeanProps;
	
	public static void main(String[] args) {
		app = new ClassPathXmlApplicationContext("classpath:/bean.xml");
		MyBean bean = (MyBean) app.getBean("bean1");
			
		mybeanProps = (Properties)app.getBean("mybeanprops");
		String from = mybeanProps.getProperty("keeper.from");
		String to = mybeanProps.getProperty("keeper.to");
		MyBeanKeeper keeper = new MyBeanKeeper(bean, from, to);
		System.out.println(keeper);
	}

}


リスト6-12
package jp.tuyano.spring.sample2;

import java.beans.PropertyDescriptor;

import org.springframework.beans.BeanWrapper;
import org.springframework.beans.BeanWrapperImpl;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {

	private static ApplicationContext app;
	
	public static void main(String[] args) {
		app = new ClassPathXmlApplicationContext("classpath:/bean.xml");
		MyBean bean = (MyBean) app.getBean("bean1");
		
		bean.setMessage("Hello, How are you?");
		MyBeanKeeper keeper = new MyBeanKeeper(bean, "taro@yamada", "hanako@flower");
		BeanWrapper wrapper = new BeanWrapperImpl(keeper);
		PropertyDescriptor[] descriptors = wrapper.getPropertyDescriptors();
		for (PropertyDescriptor descriptor : descriptors) {
			String name = descriptor.getName();
			Object value =  wrapper.getPropertyValue(name);
			System.out.println(name + ":" + value);
		}
	}

}


リスト6-13
<?xml version="1.0" encoding="UTF-8"?>
<beans ……略……>
	
	<context:property-placeholder location="classpath:bean.properties"/>
	
	<bean id="bean1" class="jp.tuyano.spring.sample2.MyBean">
		<property name="message" value="${bean.message}" />
	</bean>

	<bean id="beankeeper1" class="jp.tuyano.spring.sample2.MyBeanKeeper">
		<constructor-arg type="jp.tuyano.spring.sample2.MyBean"
			name="mybean" ref="bean1" />
		<constructor-arg type="String" name="from" value="${keeper.from}" />
		<constructor-arg type="String" name="to" value="${keeper.to}" />
	</bean>
	
</beans>


リスト6-14
package jp.tuyano.spring.sample2;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {

	private static ApplicationContext app;
	
	public static void main(String[] args) {
		app = new ClassPathXmlApplicationContext("classpath:/bean.xml");
		MyBean bean = (MyBean) app.getBean("bean1");
		System.out.println(bean);
		MyBeanKeeper beankeeper = (MyBeanKeeper) app.getBean("beankeeper1");
		System.out.println(beankeeper);
	}
}


リスト6-15
bean.date=2001-12-24


リスト6-16
package jp.tuyano.spring.sample2;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.springframework.beans.PropertyEditorRegistrar;
import org.springframework.beans.PropertyEditorRegistry;
import org.springframework.beans.propertyeditors.CustomDateEditor;

public class MyPropertyEditorRegistrar implements PropertyEditorRegistrar {

	@Override
	public void registerCustomEditors(PropertyEditorRegistry registry) {
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		CustomDateEditor editor = new CustomDateEditor(format, false);
		registry.registerCustomEditor(Date.class, editor);
	}

}


リスト6-17
<?xml version="1.0" encoding="UTF-8"?>
<beans ……略……>

	<context:property-placeholder location="classpath:bean.properties" />

	<bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
		<property name="propertyEditorRegistrars">
			<list>
				<bean class="jp.tuyano.spring.sample2.MyPropertyEditorRegistrar"/>
			</list>
		</property>
	</bean>
	 
	<bean id="bean1" class="jp.tuyano.spring.sample2.MyBean">
		<property name="message" value="${bean.message}" />
		<property name="date" value="${bean.date}" />
	</bean>

	<bean id="beankeeper1" class="jp.tuyano.spring.sample2.MyBeanKeeper">
		<constructor-arg type="jp.tuyano.spring.sample2.MyBean"
			name="mybean" ref="bean1" />
		<constructor-arg type="String" name="from" value="${keeper.from}" />
		<constructor-arg type="String" name="to" value="${keeper.to}" />
	</bean>

</beans>


リスト6-18
package jp.tuyano.spring.sample2;

import java.beans.PropertyEditorSupport;

public class MyBeanTypeEditor extends PropertyEditorSupport {

	@Override
	public void setAsText(String text) {
		MyBean bean = new MyBean();
		bean.setMessage(text);
		setValue(bean);
	}
}


リスト6-19
@Override
public void registerCustomEditors(PropertyEditorRegistry registry) {
	DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
	CustomDateEditor dateEditor = new CustomDateEditor(format, false);
	registry.registerCustomEditor(Date.class, dateEditor);
	MyBeanTypeEditor myBeanEditor = new MyBeanTypeEditor();
	registry.registerCustomEditor(MyBean.class, myBeanEditor);
}


リスト6-20
<bean id="beankeeper1" class="jp.tuyano.spring.sample2.MyBeanKeeper">
	<constructor-arg type="jp.tuyano.spring.sample2.MyBean"
		name="mybean" value="this is new MyBean!" />
	<constructor-arg type="String" name="from" value="${keeper.from}" />
	<constructor-arg type="String" name="to" value="${keeper.to}" />
</bean>


リスト7-1
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>org.springframework.samples</groupId>
	<artifactId>DataApp1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
  
	<properties>

		<!-- Generic properties -->
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Spring -->
		<spring-framework.version>5.0.0.RELEASE</spring-framework.version>

		<!-- Hibernate / JPA -->
		<hibernate.version>5.2.10.Final</hibernate.version>
		
		<!-- H2 database -->
		<h2.version>1.4.196</h2.version>
		
		<!-- Logging -->
		<logback.version>1.2.3</logback.version>
		<slf4j.version>1.7.25</slf4j.version>

		<!-- Test -->
		<junit.version>4.12</junit.version>

	</properties>
	
	<dependencies>
		<!-- Spring and Transactions -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>

		<!-- Logging with SLF4J & LogBack -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Hibernate -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.version}</version>
		</dependency>

		<!-- jdbc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		
		<!-- h2 database -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2.version}</version>
		</dependency>
		
		<!-- Test Artifacts -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring-framework.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>	

	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/libs-milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

</project>

リスト7-2
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/jdbc
	http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd">
		
	<!-- jdbc  -->
	<jdbc:embedded-database id="dataSource" type="H2">
		<jdbc:script location="classpath:script.sql" />
	 </jdbc:embedded-database>
	
	<bean class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
 	
</beans>


リスト7-3
CREATE TABLE mypersondata (
	id INTEGER PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(20) NOT NULL,
	mail VARCHAR(50),
	age INTEGER
);

INSERT INTO mypersondata (name, mail, age) VALUES('taro', 'taro@yamada', 34);
INSERT INTO mypersondata (name, mail, age) VALUES('hanako', 'hanako@flower', 28);


リスト7-4
package jp.tuyano.spring.data1;

import java.util.List;
import java.util.Map;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.jdbc.core.JdbcTemplate;

public class App {

	private static JdbcTemplate jdbcTemplate;
	private static ApplicationContext context;

	public static void main(String[] args) {

		context = new ClassPathXmlApplicationContext("classpath:/bean.xml");
		jdbcTemplate = context.getBean(JdbcTemplate.class);

		jdbcTemplate
			.execute("insert into mypersondata (name,mail,age) values('tuyano','syoda@tuyano.com',123)");
		List<Map<String, Object>> list = jdbcTemplate
				.queryForList("select * from mypersondata");
		for (Map<String, Object> obj : list) {
			System.out.println(obj);
		}

	}
	
}


リスト7-5
<dependency>
	<groupId>org.springframework.data</groupId>
	<artifactId>spring-data-jpa</artifactId>
	<version>1.11.6.RELEASE</version>
</dependency>

<dependency>
	<groupId>org.springframework</groupId>
	<artifactId>spring-orm</artifactId>
	<version>${spring-framework.version}</version>
</dependency>


リスト7-6
package jp.tuyano.spring.data1;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="mypersondata")
public class MyPersonData {

	@Id
	@Column
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	
	@Column(length=50, nullable=false)
	private String name;
	
	@Column(length=100, nullable=true)
	private String mail;
	
	@Column(nullable=true)
	private int age;

	public MyPersonData() {
	}
	
	public MyPersonData(String name, String mail, int age) {
		this();
		this.name = name;
		this.mail = mail;
		this.age = age;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getMail() {
		return mail;
	}

	public void setMail(String mail) {
		this.mail = mail;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public long getId() {
		return id;
	}

	@Override
	public String toString() {
		return "MyPersonData [id=" + id + ", name=" + name + 
				", mail=" + mail + ", age=" + age + "]";
	}

}


リスト7-7
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1"
	xmlns="http://xmlns.jcp.org/xml/ns/persistence" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence 
	http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">
	
	<persistence-unit name="persistence-unit"
		transaction-type="RESOURCE_LOCAL">
		<provider>org.hibernate.ejb.HibernatePersistence</provider>
		<properties>
			<property name="hibernate.dialect" 
				value="org.hibernate.dialect.H2Dialect" />
			<property name="hibernate.hbm2ddl.auto" value="create" />
			<property name="javax.persistence.jdbc.driver" 
				value="${jdbc.driverClassName}" />
			<property name="javax.persistence.jdbc.url" value="${jdbc.url}" />
			<property name="javax.persistence.jdbc.user" 
				value="${jdbc.username}" />
			<property name="javax.persistence.jdbc.password" 
				value="${jdbc.password}" />
		</properties>
	</persistence-unit>
	
</persistence>


リスト7-8
jdbc.type=H2
jdbc.scriptLocation=classpath:script.sql
jdbc.driverClassName=org.h2.Driver
jdbc.url=jdbc:h2:mem:mydata
jdbc.username=sa
jdbc.password=


リスト7-9
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/data/jpa
	http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/jdbc
	http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd">
	
	<context:property-placeholder location="classpath:bean.properties" />
	
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="database" value="${jdbc.type}" />
			</bean>
		</property>
	</bean>

	<!-- jdbc  -->
	<jdbc:embedded-database id="dataSource" type="H2">
		<jdbc:script location="${jdbc.scriptLocation}" />
	</jdbc:embedded-database>

</beans>


リスト7-10
package jp.tuyano.spring.data1;

import javax.persistence.EntityManager;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;

public class App {

	private static ApplicationContext context;
	private static EntityManager manager;

	public static void main(String[] args) {

		context = new ClassPathXmlApplicationContext("classpath:/bean.xml");
		LocalContainerEntityManagerFactoryBean factory =
			context.getBean(LocalContainerEntityManagerFactoryBean.class);
		manager = factory.getNativeEntityManagerFactory().createEntityManager();
		
		MyPersonData data = manager.find(MyPersonData.class, 1L);
		System.out.println(data);
	}

}


リスト7-11
package jp.tuyano.spring.data1;

import java.util.List;

public interface MyPersonDataDao<T> {
	
	public List<T> getAllEntity();
	public List<T> findByField(String field, String find);
	public void addEntity(T entity);
	public void updateEntity(T entity);
	public void removeEntity(T data);
	public void removeEntity(Long id);

}


リスト7-12
package jp.tuyano.spring.data1;

import java.util.List;

import javax.persistence.EntityManager;

public class MyPersonDataDaoImpl<MyPersonData> 
		implements MyPersonDataDao<MyPersonData> {

	private EntityManager manager = null;
	
	public MyPersonDataDaoImpl(EntityManager manager) {
		super();
		this.manager = manager;
	}
	
	public List<MyPersonData> getAllEntity() {
		// TODO Auto-generated method stub
		return null;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public List findByField(String field, String find) {
		// TODO Auto-generated method stub
		return null;
	}

	public void addEntity(Object entity) {
		// TODO Auto-generated method stub
	}

	public void updateEntity(Object entity) {
		// TODO Auto-generated method stub
	}

	public void removeEntity(Object data) {
		// TODO Auto-generated method stub
	}

	public void removeEntity(Long id) {
		// TODO Auto-generated method stub
	}
}


リスト7-13
// import javax.persistence.Query;

public List<MyPersonData> getAllEntity() {
	Query query = manager.createQuery("from MyPersonData");
	return query.getResultList();
}


リスト7-14
// import java.util.List;　追加

public static void main(String[] args) {
	context = new ClassPathXmlApplicationContext("classpath:/bean.xml");
	LocalContainerEntityManagerFactoryBean factory =
		context.getBean(LocalContainerEntityManagerFactoryBean.class);
	manager = factory.getNativeEntityManagerFactory().createEntityManager();
	
	MyPersonDataDao<MyPersonData> dao = 
		new MyPersonDataDaoImpl<MyPersonData>(manager);
	List<MyPersonData> list = dao.getAllEntity();
	for(MyPersonData person : list) {
		System.out.println(person);
	}
}


リスト7-15
@SuppressWarnings({ "unchecked", "rawtypes" })
public List<MyPersonData> findByField(String field, String find) {
	Query query = manager.createQuery("from MyPersonData where " + 
		field + " = '" + find + "'");
	return query.getResultList();
}


リスト7-16
public static void main(String[] args) {
	context = new ClassPathXmlApplicationContext("classpath:/bean.xml");
	LocalContainerEntityManagerFactoryBean factory =
		context.getBean(LocalContainerEntityManagerFactoryBean.class);
	manager = factory.getNativeEntityManagerFactory().createEntityManager();
	
	MyPersonDataDao<MyPersonData> dao = new 
		MyPersonDataDaoImpl<MyPersonData>(manager);
	List<MyPersonData> list = dao.findByField("name", "hanako"); // ☆
	for(MyPersonData person : list) {
		System.out.println(person);
	}
}


リスト7-17
// import javax.persistence.EntityTransaction;

public void addEntity(Object entity) {
	EntityTransaction transaction = manager.getTransaction();
	transaction.begin();
	manager.persist(entity);
	manager.flush();
	transaction.commit();
}


リスト7-18
public static void main(String[] args) {
	context = new ClassPathXmlApplicationContext("classpath:/bean.xml");
	LocalContainerEntityManagerFactoryBean factory =
		context.getBean(LocalContainerEntityManagerFactoryBean.class);
	manager = factory.getNativeEntityManagerFactory().createEntityManager();
	
	MyPersonDataDao<MyPersonData> dao = new 
		MyPersonDataDaoImpl<MyPersonData>(manager);
	MyPersonData personData = new MyPersonData("tuyano","syoda@tuyano.com",123);
	dao.addEntity(personData);

	List<MyPersonData> list = dao.getAllEntity();
	for(MyPersonData person : list) {
		System.out.println(person);
	}
}


リスト7-19
public void updateEntity(Object entity) {
	EntityTransaction transaction = manager.getTransaction();
	transaction.begin();
	manager.merge(entity);
	manager.flush();
	transaction.commit();
}


リスト7-20
public static void main(String[] args) {
	context = new ClassPathXmlApplicationContext("classpath:/bean.xml");
	LocalContainerEntityManagerFactoryBean factory =
			context.getBean(LocalContainerEntityManagerFactoryBean.class);
	manager = factory.getNativeEntityManagerFactory().createEntityManager();
	
	MyPersonDataDao<MyPersonData> dao = new 
		MyPersonDataDaoImpl<MyPersonData>(manager);
	MyPersonData personData = manager.find(MyPersonData.class, 1L);
	personData.setName("*** " + personData.getName() + " ***");
	dao.updateEntity(personData);

	List<MyPersonData> list = dao.getAllEntity();
	for(MyPersonData person : list) {
		System.out.println(person);
	}
}


リスト7-21
public void removeEntity(Object data) {
	EntityTransaction transaction = manager.getTransaction();
	transaction.begin();
	manager.remove(data);
	manager.flush();
	transaction.commit();
}

public void removeEntity(Long id) {
	MyPersonData entity = manager.find(MyPersonData.class, id);
	this.removeEntity(entity);
}


リスト7-22
public static void main(String[] args) {
	context = new ClassPathXmlApplicationContext("classpath:/bean.xml");
	LocalContainerEntityManagerFactoryBean factory =
		context.getBean(LocalContainerEntityManagerFactoryBean.class);
	manager = factory.getNativeEntityManagerFactory().createEntityManager();
	
	MyPersonDataDao<MyPersonData> dao = new 
		MyPersonDataDaoImpl<MyPersonData>(manager);
	dao.removeEntity(1L);
	
	List<MyPersonData> list = dao.getAllEntity();
	for(MyPersonData person : list) {
		System.out.println(person);
	}
}


リスト7-23
package jp.tuyano.spring.data1;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.Database;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;

@Configuration
public class MyAppConfig {

	@Bean
	public DataSource dataSource() {
		EmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder();
		builder.setType(EmbeddedDatabaseType.H2);
		builder.addScript("script.sql");
		return builder.build();
	}
	
	@Bean
	public JpaVendorAdapter vendorAdapter() {
		HibernateJpaVendorAdapter vendorAdapter = 
				new HibernateJpaVendorAdapter();
		vendorAdapter.setGenerateDdl(true);
		vendorAdapter.setDatabase(Database.H2);
		return vendorAdapter;
	}
	
	@Bean
	public EntityManagerFactory entityManagerFactory() {
		LocalContainerEntityManagerFactoryBean factory = 
				new LocalContainerEntityManagerFactoryBean();
		
		factory.setJpaVendorAdapter(vendorAdapter());
		factory.setPackagesToScan("jp.tuyano.spring.data1");
		factory.setDataSource(dataSource());
		factory.afterPropertiesSet();
		return factory.getObject();
	}
}


リスト7-24
// import org.springframework.context.annotation.AnnotationConfigApplicationContext;　追記

public static void main(String[] args) {
	context = new AnnotationConfigApplicationContext(MyAppConfig.class);
	EntityManagerFactory factory = context.getBean(EntityManagerFactory.class);
	manager = factory.createEntityManager();
	
	MyPersonDataDao<MyPersonData> dao = new 
		MyPersonDataDaoImpl<MyPersonData>(manager);
	
	List<MyPersonData> list = dao.getAllEntity();
	
	for(MyPersonData person : list) {
		System.out.println(person);
	}
}


リスト8-1
<project xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
		http://maven.apache.org/xsd/maven-4.0.0.xsd">
  
	<modelVersion>4.0.0</modelVersion>
	<groupId>jp.tuyano.spring.websample1</groupId>
	<artifactId>MySampleWebApp1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
  
	<properties>

		<!-- Generic properties -->
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		
		<!-- Web -->
		<jsp.version>2.2</jsp.version>
		<jstl.version>1.2</jstl.version>
		<servlet.version>3.1.0</servlet.version>

		<!-- Spring -->
		<spring-framework.version>5.0.0.RELEASE</spring-framework.version>

		<!-- Hibernate / JPA -->
		<hibernate.version>5.2.10.Final</hibernate.version>
		
		<!-- H2 database -->
		<h2.version>1.4.196</h2.version>
		
		<!-- Logging -->
		<logback.version>1.2.3</logback.version>
		<slf4j.version>1.7.25</slf4j.version>

		<!-- Test -->
		<junit.version>4.12</junit.version>

	</properties>
	
	<dependencies>
	
		<!-- Spring MVC -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		
		<!-- Other Web dependencies -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>${jstl.version}</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${servlet.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>${jsp.version}</version>
			<scope>provided</scope>
		</dependency>
	
		<!-- Hibernate -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.version}</version>
		</dependency>

		<!-- jdbc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		
		<!--  Spring Data JPA -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-jpa</artifactId>
			<version>1.11.6.RELEASE</version>
		</dependency>
		
		<!-- Spring ORM -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		
		<!-- h2 database -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2.version}</version>
		</dependency>
		
		<!-- Logging with SLF4J & LogBack -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
		</dependency>
		
		<!-- Test Artifacts -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring-framework.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>	
	
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/libs-milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>
	
</project>


リスト8-2
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/data/jpa
		http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/jdbc
		http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd">
    
	<context:property-placeholder location="classpath:spring/bean.properties" />
	
 	<context:annotation-config />
	<context:component-scan base-package="jp.tuyano.spring.data1" />
	
	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
		
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="database" value="${jdbc.type}" />
			</bean>
		</property>
	</bean>
	
	<!-- jdbc  -->
	<jdbc:embedded-database id="dataSource" type="H2">
		<jdbc:script location="${jdbc.scriptLocation}" />
	</jdbc:embedded-database>

</beans>


リスト8-3
package jp.tuyano.spring.data1;

import org.springframework.web.context.support.SpringBeanAutowiringSupport;

public abstract class AbstractMyPerrsonDataDao<T> implements MyPersonDataDao<T> {
	
	public void init(){
		SpringBeanAutowiringSupport
			.processInjectionBasedOnCurrentContext(this);
	}
}


リスト8-4
package jp.tuyano.spring.data1;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.stereotype.Service;
import org.springframework.web.context.support.SpringBeanAutowiringSupport;

@Service
public class MyPersonDataDaoImpl
		extends AbstractMyPerrsonDataDao {

	@Autowired
	private ApplicationContext context;
	
	@Autowired
	private LocalContainerEntityManagerFactoryBean factory;
	
	@PersistenceContext
	private EntityManager manager;
	
	public MyPersonDataDaoImpl() {
		init();
	}
	
	public List<MyPersonData> getAllEntity() {
		Query query = manager.createQuery("from MyPersonData");
		return query.getResultList();
	}

	public List<MyPersonData> findByField(String field, String find) {
		Query query = manager.createQuery("from MyPersonData where " 
			+ field + " = '" + find + "'");
		return query.getResultList();
	}
	
	public void addEntity(Object entity) {
		EntityManager manager = factory.
			getNativeEntityManagerFactory().createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		manager.persist(entity);
		System.out.println("add:" + entity);
		manager.flush();
		transaction.commit();
	}

	public void updateEntity(Object entity) {
		EntityManager manager = factory.
			getNativeEntityManagerFactory().createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		manager.merge(entity);
		manager.flush();
		transaction.commit();
	}

	public void removeEntity(Object data) {
		EntityManager manager = factory.
			getNativeEntityManagerFactory().createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		transaction.begin();
		manager.remove(data);
		manager.flush();
		transaction.commit();
	}

	public void removeEntity(Long id) {
		MyPersonData entity = manager.find(MyPersonData.class, id);
		this.removeEntity(entity);
	}

}


リスト8-5
package jp.tuyano.spring.data1;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;

import org.springframework.web.context.support.SpringBeanAutowiringSupport;

public class BeanAutowiringFilterServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	@Override
	public void init() throws ServletException {
		super.init();
		SpringBeanAutowiringSupport
			.processInjectionBasedOnCurrentContext(this);
	}

}


リスト8-6
package jp.tuyano.spring.data1;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;

@WebServlet("/person")
public class MyPersonDataServlet extends BeanAutowiringFilterServlet {
	private static final long serialVersionUID = 1L;
	
	@Autowired
	private MyPersonDataDaoImpl dao;
	
	protected void doGet(HttpServletRequest request, 
			HttpServletResponse response) 
			throws ServletException, IOException {
		List<MyPersonData> list = dao.getAllEntity();
		request.setAttribute("entities", list);
		request.getRequestDispatcher("/index.jsp").forward(request, response);
	}
	
	protected void doPost(HttpServletRequest request, 
			HttpServletResponse response) 
			throws ServletException, IOException {
		String name = request.getParameter("name");
		String mail = request.getParameter("mail");
		int age = Integer.parseInt(request.getParameter("age"));
		MyPersonData entity = new MyPersonData(name, mail, age);
		dao.addEntity(entity);
		response.sendRedirect("person");
	}

}


リスト8-7
<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
		http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" 
	version="3.1">
	
	<display-name>DataWebApp1</display-name>
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/application-config.xml</param-value>
	</context-param>
	
	<listener>
	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<filter>
		<filter-name>EncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>EncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- MyPersonDataServlet -->
	<!-- <servlet>
		<description></description>
		<display-name>MyPersonDataServlet</display-name>
		<servlet-name>MyPersonDataServlet</servlet-name>
		<servlet-class>jp.tuyano.spring.data1.MyPersonDataServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>MyPersonDataServlet</servlet-name>
		<url-pattern>/person</url-pattern>
	</servlet-mapping> -->
	
</web-app>


リスト8-8
<!DOCTYPE html>
<%@page import="java.util.List" %>
<%@page import="jp.tuyano.spring.data1.MyPersonData" %>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
    
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%>

<html>
<head>
	<meta charset="utf-8">
	<title>Welcome</title>
</head> 
<body>
	<h1>JPA Sample</h1>
	<form method="post" action="person">
		<table>
		<tr><td>Name:</td><td><input type="text" name="name"></td></tr>
		<tr><td>Mail:</td><td><input type="text" name="mail"></td></tr>
		<tr><td>Age :</td><td><input type="text" name="age"></td></tr>
		<tr><td></td><td><input type="submit" value="追加"></td></tr>
		</table>
	</form>
	<hr>
	<ol>
	<% for(Object entity : (List)request.getAttribute("entities")){ %>
		<li><%=entity %></li>
	<% } %>
	</ol>
</body>
</html>


リスト8-9
package jp.tuyano.spring.data1;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

@Entity
@Table(name="mypersondata")
@NamedQueries({
    @NamedQuery(name = "MyPersonData.getAllEntity", query = "FROM MyPersonData"),
    @NamedQuery(name = "MyPersonData.findByName", query = "FROM MyPersonData WHERE name = :value")
})
public class MyPersonData {……クラスの内容は変更なし……}


リスト8-10
// getAllEntityを以下に変更する
@SuppressWarnings("unchecked")
public List<MyPersonData> getAllEntity() {
	Query query = manager.createNamedQuery("MyPersonData.getAllEntity");
	return query.getResultList();
}

// 新たに追加するメソッド
@SuppressWarnings("unchecked")
public List<MyPersonData> findByName(String value) {
	Query query = manager.createNamedQuery("MyPersonData.findByName")
		.setParameter("value", value);
	return query.getResultList();
}


リスト8-11
protected void doGet(HttpServletRequest request, 
		HttpServletResponse response) 
		throws ServletException, IOException {
	List<MyPersonData> list = dao.getAllEntity();
	request.setAttribute("entities", list);
	request.getRequestDispatcher("/index.jsp").forward(request, response);
}

protected void doPost(HttpServletRequest request, 
		HttpServletResponse response) 
		throws ServletException, IOException {
	String name = request.getParameter("name");
	List<MyPersonData> list = dao.findByName(name);
	request.setAttribute("entities", list);
	request.getRequestDispatcher("/index.jsp").forward(request, response);
}


リスト8-12
package jp.tuyano.spring.data1;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface MyPersonDataDaoRepository 
	extends JpaRepository<MyPersonData, Integer> {
}


リスト8-13
<jpa:repositories base-package="jp.tuyano.spring.data1" />

 <bean id="transactionManager"
	class="org.springframework.orm.jpa.JpaTransactionManager">
	<property name="entityManagerFactory" ref="entityManagerFactory" />
	<property name="dataSource" ref="dataSource" />
</bean>


リスト8-14
package jp.tuyano.spring.data1;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.context.support.SpringBeanAutowiringSupport;

public class BeanAutowiringFilterServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	@Autowired
	MyPersonDataDaoRepository repository;
	
	@Override
	public void init() throws ServletException {
		super.init();
		SpringBeanAutowiringSupport
			.processInjectionBasedOnCurrentContext(this);
	}

}


リスト8-15
package jp.tuyano.spring.data1;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/person")
public class MyPersonDataServlet extends BeanAutowiringFilterServlet {
	private static final long serialVersionUID = 1L;
	
	protected void doGet(HttpServletRequest request, 
			HttpServletResponse response) 
			throws ServletException, IOException {
		List<MyPersonData> list = repository.findAll(); //☆
		request.setAttribute("entities", list);
		request.getRequestDispatcher("/index.jsp").forward(request, response);
	}
	
	protected void doPost(HttpServletRequest request, 
			HttpServletResponse response) 
			throws ServletException, IOException {
		String name = request.getParameter("name");
		String mail = request.getParameter("mail");
		int age = Integer.parseInt(request.getParameter("age"));
		MyPersonData entity = new MyPersonData(name, mail, age);
		repository.saveAndFlush(entity); //☆
		response.sendRedirect("person");
	}

}


リスト8-16
package jp.tuyano.spring.data1;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface MyPersonDataDaoRepository 
	extends JpaRepository<MyPersonData, Long> {

	public List<MyPersonData> findByName(String name);
	public List<MyPersonData> findByMail(String mail);
	public List<MyPersonData> findByAge(int age);
	public List<MyPersonData> findByNameLike(String name);
	public List<MyPersonData> findByMailLike(String mail);
	public List<MyPersonData> findByNameOrMail
		(String name, String mail);
	public List<MyPersonData> findByNameLikeOrMailLike
		(String name, String mail);
	public List<MyPersonData> findByAgeGreaterThan(Integer age);
	public List<MyPersonData> findByAgeLessThan(Integer age);
	public List<MyPersonData> findByAgeGreaterThanOrAgeLessThan
		(Integer age0, Integer age1);
}


リスト8-17
protected void doPost(HttpServletRequest request, 
		HttpServletResponse response) 
		throws ServletException, IOException {
	String name = request.getParameter("name");
	String mail = request.getParameter("mail");
	List<MyPersonData> list = repository
		.findByNameLikeOrMailLike("%" + name + "%", "%" + mail + "%");
	request.setAttribute("entities", list);
	request.getRequestDispatcher("/index.jsp").forward(request, response);
}


リスト8-18
// import org.springframework.data.jpa.repository.Query;　追加

@Query("select name from MyPersonData")
public List<String> getAllName();


リスト8-19
protected void doGet(HttpServletRequest request, 
		HttpServletResponse response) 
		throws ServletException, IOException {
	
	List<String> list = repository.getAllName(); //☆
	request.setAttribute("entities", list);
	request.getRequestDispatcher("/index.jsp").forward(request, response);
}


リスト8-20
// import javax.persistence.criteria.CriteriaBuilder;
// import javax.persistence.criteria.CriteriaQuery;
// import javax.persistence.criteria.Root;

public List<MyPersonData> getAllEntity() {
	CriteriaBuilder builder = manager.getCriteriaBuilder();
	CriteriaQuery<MyPersonData> query = builder
		.createQuery(MyPersonData.class);
	Root<MyPersonData> root = query.from(MyPersonData.class);
	query.select(root);
	List<MyPersonData> list = (List<MyPersonData>) manager
		.createQuery(query).getResultList();
	return list;
}


リスト8-21
// import org.springframework.beans.factory.annotation.Autowired;

// 以下をフィールドとして用意する
@Autowired
private MyPersonDataDaoImpl dao;

protected void doGet(HttpServletRequest request, 
		HttpServletResponse response) 
		throws ServletException, IOException {
	List<MyPersonData> list = dao.getAllEntity();
	request.setAttribute("entities", list);
	request.getRequestDispatcher("/index.jsp").forward(request, response);
}


リスト8-22
public List<MyPersonData> findByName(String value) {
	CriteriaBuilder builder = manager.getCriteriaBuilder();
	CriteriaQuery<MyPersonData> query = builder.createQuery(MyPersonData.class);
	Root<MyPersonData> root = query.from(MyPersonData.class);
	query.select(root).where(builder.like(root.get("name").as(String.class), value));
	Query jpql = manager.createQuery(query);
	List<MyPersonData> list = (List<MyPersonData>) jpql.getResultList();
	return list;
}


リスト8-23
protected void doPost(HttpServletRequest request, 
		HttpServletResponse response) 
		throws ServletException, IOException {
	String name = request.getParameter("name");
	List<MyPersonData> list = dao.findByName(name);
	request.setAttribute("entities", list);
	request.getRequestDispatcher("/index.jsp").forward(request, response);
}


リスト8-24
<dependency>
	<groupId>org.hibernate</groupId>
	<artifactId>hibernate-validator</artifactId>
	<version>6.0.1.Final</version>
</dependency>


リスト8-25
<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>


リスト8-26
package jp.tuyano.spring.data1;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.Email;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;

@Entity
@Table(name="mypersondata")
public class MyPersonData {

	@Id
	@Column
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	
	@Column(length=50, nullable=false)
	@NotEmpty
	private String name;
	
	@Column(length=100, nullable=true)
	@NotEmpty
	@Email
	private String mail;
	
	@Column(nullable=true)
	@NotNull
	@Min(0)
	@Max(150)
	private int age;

	……以下略……
}


リスト8-27
<!DOCTYPE html>
<%@page import="java.util.List" %>
<%@page import="jp.tuyano.spring.data1.MyPersonData" %>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
    
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%>

<html>
<head>
	<meta charset="utf-8">
	<title>Welcome</title>
</head> 
<body>
	<h1>JPA Sample</h1>
	<p><%=request.getAttribute("msg") %></p>
	<table>
	<form method="post" action="person">
	<tr><td>Name:</td><td><input type="text" name="name" 
		value="<%=request.getAttribute("name") %>"></td></tr>
	<tr><td>Mail:</td><td><input type="text" name="mail" 
		value="<%=request.getAttribute("mail") %>"></td></tr>
	<tr><td>Age :</td><td><input type="text" name="age" 
		value="<%=request.getAttribute("age") %>"></td></tr>
	<tr><td></td><td><input type="submit" value="追加"></td></tr>
	</form>
	</table>
	<hr>
	<ol>
	<% for(Object entity : (List) request.getAttribute("entities")){ %>
	<li><%=entity %></li>
	<% } %>
	</ol>
</body>
</html>


リスト8-28
package jp.tuyano.spring.data1;

import java.io.IOException;
import java.util.List;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.springframework.beans.factory.annotation.Autowired;

@WebServlet("/person")
public class MyPersonDataServlet extends BeanAutowiringFilterServlet {
	private static final long serialVersionUID = 1L;
		
	@Autowired
	private MyPersonDataDaoImpl dao;

	@Autowired
	private Validator validator;
	
	protected void doGet(HttpServletRequest request, 
			HttpServletResponse response) 
			throws ServletException, IOException {
		
		List<MyPersonData> list = dao.getAllEntity();
		request.setAttribute("msg", "please type my person data.");
		request.setAttribute("name", "");
		request.setAttribute("mail", "");
		request.setAttribute("age", "");
		request.setAttribute("entities", list);
		request.getRequestDispatcher("/index.jsp").forward(request, response);
	}
	
	protected void doPost(HttpServletRequest request, 
			HttpServletResponse response) 
			throws ServletException, IOException {
		String name = request.getParameter("name");
		String mail = request.getParameter("mail");
		int age;
		try {
			age = Integer.parseInt(request.getParameter("age"));
		} catch (NumberFormatException e) {
			age = 0;
		}
		MyPersonData entity = new MyPersonData(name, mail, age);
		Set<ConstraintViolation<MyPersonData>> result = 
				validator.validate((MyPersonData)entity);
		if (result.isEmpty()) {
			dao.addEntity(entity);
			response.sendRedirect("person");
		} else {
			String msg = "<pre>";
			for(ConstraintViolation<MyPersonData> viola : result){
				msg += viola.getPropertyPath() + ":" + viola.getMessage() + "\n";
			}
			msg += "</pre>";
			request.setAttribute("msg", msg);
			request.setAttribute("name", name);
			request.setAttribute("mail", mail);
			request.setAttribute("age", "" + age);
			request.setAttribute("entities", dao.getAllEntity());
			request.getRequestDispatcher("/index.jsp").forward(request, response);
		}
	}

}


リスト8-29
@Entity
@Table(name="mypersondata")
public class MyPersonData {

	@Id
	@Column
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@NotEmpty(message="必須項目です。")
	private long id;
	
	@Column(length=50, nullable=false)
	@NotEmpty(message="必須項目です。")
	private String name;
	
	@Column(length=100, nullable=true)
	@NotEmpty(message="必須項目です。")
	@Email(message="メールアドレスが必要です。")
	private String mail;
	
	@Column(nullable=true)
	@Min(value=0, message="{value}以上でなければいけません。")
	@Max(value=150, message="{value}以下でなければいけません。")
	private int age;

	……以下略……
}


リスト9-1
<project xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
		http://maven.apache.org/xsd/maven-4.0.0.xsd">
	
	<modelVersion>4.0.0</modelVersion>
	<groupId>jp.tuyano.spring.mvc1</groupId>
	<artifactId>MyMVCApp1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
  
	<properties>

		<!-- Generic properties -->
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		
		<!-- Web -->
		<jsp.version>2.2</jsp.version>
		<jstl.version>1.2</jstl.version>
		<servlet.version>3.1.0</servlet.version>
		

		<!-- Spring -->
		<spring-framework.version>5.0.0.RELEASE</spring-framework.version>
		
		<!-- Spring Data JPA -->
		<spring-data-jpa.version>1.11.6.RELEASE</spring-data-jpa.version>

		<!-- Hibernate / JPA -->
		<hibernate.version>5.2.10.Final</hibernate.version>
		
		<!-- Hibernate validator -->
		<hibernate-validator.version>6.0.1.Final</hibernate-validator.version>

		<!-- H2 database -->
		<h2.version>1.4.196</h2.version>

		<!-- Logging -->
		<logback.version>1.2.3</logback.version>
		<slf4j.version>1.7.25</slf4j.version>

		<!-- Test -->
		<junit.version>4.12</junit.version>

	</properties>
	
	<dependencies>
	
		<!-- Spring MVC -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		
		<!-- Other Web dependencies -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>${jstl.version}</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${servlet.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>${jsp.version}</version>
			<scope>provided</scope>
		</dependency>
	
		<!-- Spring and Transactions -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>

		<!-- Logging with SLF4J & LogBack -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Hibernate -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.version}</version>
		</dependency>

		<!-- jdbc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		
		<!--  Spring Data JPA -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-jpa</artifactId>
			<version>${spring-data-jpa.version}</version>
		</dependency>
		
		<!-- Spring ORM -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		
		<!-- h2 database -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2.version}</version>
		</dependency>
		
		<!-- Hibernate validator -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>${hibernate-validator.version}</version>
		</dependency>
			
		<!-- Test Artifacts -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring-framework.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>	
	
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/libs-milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

</project>


リスト9-2
<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd">

	<context:component-scan base-package="jp.tuyano.spring.mvc1"/>

	<mvc:annotation-driven />

	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	        <property name="prefix" value="/WEB-INF/view/"/>
	        <property name="suffix" value=".jsp"/>
	</bean>

</beans>


リスト9-3
package jp.tuyano.spring.mvc1;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
public class HelloController {

	@RequestMapping("/")
	public String index() {
		return "Hello, Spring MVC!";
	}

}


リスト9-4
package jp.tuyano.spring.mvc1;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController {

	@RequestMapping("/hello/{num}")
	public String index(@PathVariable int num) {
		int total = 0;
		for(int i = 1;i <= num;i++) {
			total += i;
		}
		return "you send: " + num + ".\n"
				+ "total: " + total + "!";
	}

}


リスト9-5
package jp.tuyano.spring.mvc1;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController {
	private int id;

	private List<String> names = new ArrayList<String>();
	private List<String> mails = new ArrayList<String>();

	public HelloController() {
		super();
		names.add("taro");
		names.add("hanako");
		names.add("sachiko");
		names.add("tuyano");
		names.add("mami");
		mails.add("taro@yamada");
		mails.add("hanako@flower");
		mails.add("sachiko@happy");
		mails.add("syoda@tuyano.com");
		mails.add("mami@mumemo");
	}

	@RequestMapping("/hello")
	public XmlData index() {
		XmlData obj = new XmlData(id, names.get(id), mails.get(id));
		id = ++id == names.size() ? 0 : id;
		return obj;
	}

}

@XmlRootElement(name = "xmldata")
@XmlAccessorType(XmlAccessType.NONE)
class XmlData {

	@XmlAttribute
	private Integer id;

	@XmlElement
	private String name;

	@XmlElement
	private String email;

	public XmlData() {
		super();
		this.id = 0;
		this.name = "noname";
		this.email = "no@mail";
	}

	public XmlData(Integer id, String name, String email) {
		this();
		this.id = id;
		this.name = name;
		this.email = email;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

}


リスト9-6
<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
</bean>


リスト9-7
package jp.tuyano.spring.mvc1;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class AppController {

	@RequestMapping("/msg")
	public String message() {
		return "showMessage";
	}
    
}


リスト9-8
<!DOCTYPE html>
<%@ page language="java" 
		contentType="text/html; charset=UTF-8" 
		pageEncoding="UTF-8"%>
<html>
	<head>
		<meta charset="utf-8">
		<title>Welcome</title>
		<style>
		body { font-size:14pt; color:#666; }
		h1 { font-size:70pt; color:#aaa; margin:-15px 0px; }
		</style>
	</head> 
	<body>
		<h1>Welcome</h1>
		<p>this is sample page.</p>
	</body>
</html>


リスト9-9
<body>
	<h1>Welcome</h1>
	<p>${msg}</p>
</body>


リスト9-10
package jp.tuyano.spring.mvc1;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class AppController {

	@RequestMapping("/msg")
	public String index(Model model) {
		model.addAttribute("msg", "this is message from controller!"); // ☆
		return "showMessage";
	}
    
}


リスト9-11
<body>
	<h1>Welcome</h1>
	<p>${msg}</p>
	<form method="post" action="./post">
		<input type="text" name="text1">
		<input type="submit">
	</form>
</body>


リスト9-12
package jp.tuyano.spring.mvc1;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class AppController {

	@RequestMapping("/msg")
	public String index(Model model) {
		model.addAttribute("msg", "this is message from controller!"); // ☆
		return "showMessage";
	}
    
	@RequestMapping(value="/post", method=RequestMethod.POST)
	public ModelAndView postForm(@RequestParam("text1") String text1) {
		ModelAndView mv = new ModelAndView("showMessage");
		mv.addObject("msg", "you write '" + text1 + "'!!!");
		return mv;
	}
}


リスト9-13
jdbc.type=H2
jdbc.scriptLocation=classpath:spring/script.sql
jdbc.driverClassName=org.h2.Driver
jdbc.url=jdbc:h2:mem:mydata
jdbc.username=sa
jdbc.password=


リスト9-14
CREATE TABLE mymemodata (
	id INTEGER PRIMARY KEY AUTO_INCREMENT,
	title VARCHAR(100) NOT NULL,
	content VARCHAR(255),
);

INSERT INTO mymemodata (title, content) VALUES('Hello!', 'This is sample message.');
INSERT INTO mymemodata (title, content) VALUES('welcome', 'welcome to spring mvc!');


リスト9-15
<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/data/jpa
		http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/jdbc
		http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">
    
	<context:property-placeholder location="classpath:application.properties" />

	<jpa:repositories base-package="jp.tuyano.spring.mvc1" />

	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
	
	 <bean id="transactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="database" value="${jdbc.type}" />
			</bean>
		</property>
	</bean>
	
	<!-- jdbc  -->
	<jdbc:embedded-database id="dataSource" type="H2">
		<jdbc:script location="${jdbc.scriptLocation}" />
	</jdbc:embedded-database>
	
</beans>


リスト9-16
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1"
	xmlns="http://xmlns.jcp.org/xml/ns/persistence" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence 
	http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">
	
	<persistence-unit name="persistence-unit"
		transaction-type="RESOURCE_LOCAL">
		
		<provider>org.hibernate.ejb.HibernatePersistence</provider>
		
		<properties>
			<property name="hibernate.dialect" 
				value="org.hibernate.dialect.H2Dialect" />
			<property name="hibernate.hbm2ddl.auto" value="create" />
			<property name="javax.persistence.jdbc.driver" 
				value="${jdbc.driverClassName}" />
			<property name="javax.persistence.jdbc.url" value="${jdbc.url}" />
			<property name="javax.persistence.jdbc.user" 
				value="${jdbc.username}" />
			<property name="javax.persistence.jdbc.password" 
				value="${jdbc.password}" />
		</properties>
	</persistence-unit>
	 
</persistence>


リスト9-17
package jp.tuyano.spring.mvc1;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

@Entity
public class MyMemoData implements Serializable {
	private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String title;

    @Column(nullable = false)
    private String content;

    public MyMemoData() {
    	super();
    }
	public MyMemoData(String title, String content) {
		super();
		this.title = title;
		this.content = content;
	}
	
	public Long getId() {
		return id;
	}
	public String getTitle() {
		return title;
	}
	public void setTitle(String title) {
		this.title = title;
	}
	public String getContent() {
		return content;
	}
	public void setContent(String content) {
		this.content = content;
	}
	
	@Override
	public String toString() {
		return "MyMemoData [id=" + id + ", title=" + title + ", content="
				+ content + "]";
	}
    
}


リスト9-18
package jp.tuyano.spring.mvc1;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface MyMemoDataRepository 
	extends JpaRepository<MyMemoData, Long>{

}


リスト9-19
<body>
	<h1>Index Page</h1>
	<p>${msg}</p>
	<form method="post" action="./post">
	<input type="text" name="title"><br>
	<textarea name="content"></textarea><br>
	<input type="submit">
	</form>
</body>


リスト9-20
package jp.tuyano.spring.mvc1;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class AppController {

	@Autowired
	MyMemoDataRepository repository;

	@RequestMapping("/msg")
	public String index(Model model) {
		model.addAttribute("msg", "please type memo data.");
		return "index";
	}
	
	@RequestMapping(value="/post", method=RequestMethod.POST)
	public ModelAndView postForm(@RequestParam("title") String title,
			@RequestParam("content") String content) {
		MyMemoData memo = new MyMemoData(title, content);
		repository.saveAndFlush(memo);
		ModelAndView model = new ModelAndView("index");
		model.addObject("msg", "add memo<br>" + memo);
		return model;
	}
	
	@RequestMapping("/memo")
	public String memo(Model model) {
		List<MyMemoData> list = repository.findAll();
		String result = "<pre>";
		for(MyMemoData memo : list){
			result += memo.toString() + "\n";
		}
		result += "</pre>";
		model.addAttribute("msg",result);
		return "index";
	}
}


リスト9-21
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
		http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.tuyano.spring.boot</groupId>
	<artifactId>MyBootApp</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>MyBootApp</name>
	<description>Sample project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.0.M5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

</project>


リスト9-22
package com.tuyano.spring.boot.myapp;

import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class SampleController {
	
	@Autowired
	PlaceDataRepository repository;
	
	@PostConstruct
	public void init() {
		repository.saveAndFlush(new PlaceData("Shinjuku", "Tokyo", "160-0022"));
		repository.saveAndFlush(new PlaceData("Atami", "Shizuoka", "413-0033"));
		repository.saveAndFlush(new PlaceData("Sakura", "Chiba", "285-0025"));
	}
	
	@RequestMapping("/")
	public ModelAndView sample(ModelAndView mav) {
		List<PlaceData> list = (List<PlaceData>)repository.findAll();
		mav.addObject("list", list);
		mav.setViewName("sample");
		return mav;
	}
}


リスト9-23
<!DOCTYPE html>
<html>

<head>
	<meta charset="utf-8">
	<title>Welcome</title>
	<style>
	body { font-size:14pt; color:#666; }
	h1 { font-size:70pt; color:#aaa; margin:-15px 0px; }
	</style>
</head>
<body>
	<h1>Sample</h1>
	<p>this is sample page.</p>
	<hr>
	<ul th:each="obj : ${list}">
	<li th:text="${obj}"></li>
	</ul>
</body>


リスト9-24
package com.tuyano.spring.boot.myapp;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="placedata")
public class PlaceData {

	@Id
	@Column
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;

	@Column(length=50, nullable=false)
	private String name;

	@Column(length=200, nullable=false)
	private String address;

	@Column(length=20, nullable=false)
	private String postcode;

	public PlaceData() {
		super();
	}
	
	public PlaceData(String name, String address, String postcode) {
		this();
		this.name = name;
		this.address = address;
		this.postcode = postcode;
	}

	public long getId() {
		return id;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getPostcode() {
		return postcode;
	}

	public void setPostcode(String postcode) {
		this.postcode = postcode;
	}

	@Override
	public String toString() {
		return "PlaceData [id=" + id + ", name=" + name + 
				", address=" + address + ", postcode=" + 
				postcode + "]";
	}
	
}


リスト9-25
package com.tuyano.spring.boot.myapp;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface PlaceDataRepository 
		extends JpaRepository<PlaceData, Long>{

}


